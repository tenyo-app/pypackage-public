name: Release
permissions:
  contents: read

on:
  release:
      types:
        - published

env:
  PACKAGE_NAME: package_name

jobs:
  pylint:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Pylint (python: ${{ matrix.python-version }})"
        run: make pylint

  black:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Black (python: ${{ matrix.python-version }})"
        run: make black-check

  mypy:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Mypy (python: ${{ matrix.python-version }})"
        run: make mypy

  unit-tests:
    runs-on: ubuntu-24.04
    needs:
      - pylint
      - black
      - mypy
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Unit test (python: ${{ matrix.python-version }})"
        run: make test-unit

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov

  functional-tests:
    runs-on: ubuntu-24.04
    needs:
      - pylint
      - black
      - mypy
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Functional test (python: ${{ matrix.python-version }})"
        run: make test-functional

  integration-tests:
    runs-on: ubuntu-24.04
    needs:
      - pylint
      - black
      - mypy
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Integration test (python: ${{ matrix.python-version }})"
        run: make test-integration

  doc-tests:
    runs-on: ubuntu-24.04
    needs:
      - unit-tests
      - functional-tests
      - integration-tests
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Documentation test (python: ${{ matrix.python-version }})"
        run: make doctest

  build-docs-check:
    runs-on: ubuntu-24.04
    needs:
      - doc-tests

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5.1.0

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: "Build documentation"
        run: make docs

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build/html

  deploy-docs:
    runs-on: ubuntu-24.04
    needs:
      - build-docs-check
      - build-package

    steps:
      - uses: actions/checkout@v4

      - name: Sync Readthedocs versions
        env:
          READTHEDOCS_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
        run: |
          curl --fail -X POST -H "Authorization: Token ${READTHEDOCS_TOKEN}" https://readthedocs.org/api/v3/projects/$PACKAGE_NAME/sync-versions/ || exit 1

      - name: Deactivate previous patches
        env:
          READTHEDOCS_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          MINOR_VERSION="${VERSION%.*}"
          echo "Deactivating patches for '${MINOR_VERSION}'..."
          VERSIONS=$(curl --fail -s -H "Authorization: Token $READTHEDOCS_TOKEN" "https://readthedocs.org/api/v3/projects/$PACKAGE_NAME/versions/" | jq -r '.results[].slug') || exit 1
          echo "Got versions: '${VERSIONS}'"
          for version in ${VERSIONS}; do
            if [[ $version == $MINOR_VERSION.* ]]; then
              echo "Disabling version: '$version'"
              curl --fail -X PATCH \
                -H "Authorization: Token $READTHEDOCS_TOKEN" \
                -H "Content-Type: application/json" \
                -d '{"active": false}' \
                "https://readthedocs.org/api/v3/projects/$PACKAGE_NAME/versions/$version/" || exit 1
            fi
          done

      - name: "Activate new version '${{ github.event.release.tag_name }}'"
        env:
          READTHEDOCS_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          sleep 5
          curl --fail -X PATCH \
            -H "Authorization: Token ${READTHEDOCS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"active": true}' \
            https://readthedocs.org/api/v3/projects/$PACKAGE_NAME/versions/${VERSION}/ || exit 1

      - name: "Trigger docs deployment '${{ github.event.release.tag_name }}'"
        env:
          READTHEDOCS_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          response=$(curl --fail -X POST -H "Authorization: Token ${READTHEDOCS_TOKEN}" https://readthedocs.org/api/v3/projects/$PACKAGE_NAME/versions/${VERSION}/builds/) || exit 1
          build_id=$(echo "$response" | jq -r '.build.id')
          echo "Build ID: $build_id"
          echo "build_id=$build_id" >> $GITHUB_ENV

      - name: "Wait for docs deployment to complete"
        env:
          READTHEDOCS_TOKEN: ${{ secrets.READTHEDOCS_TOKEN }}
          BUILD_ID: ${{ env.build_id }}
        run: |
          while true; do
            response=$(curl --fail -s -H "Authorization: Token $READTHEDOCS_TOKEN" https://readthedocs.org/api/v3/projects/$PACKAGE_NAME/builds/${BUILD_ID}/) || exit 1
            build_state=$(echo $response | jq -r '.state.code')
            build_success=$(echo $response | jq -r '.success')

            echo "Polling deployment state... $build_state"

            if [[ "$build_state" == "finished" ]]; then
              echo "Deployment success: $build_success"
              if [[ "$build_success" == "true" ]]; then
                echo "✅ Read the Docs build completed successfully."
                break
              else:
                echo "❌ Read the Docs build failed."
                exit 1
              fi
            fi

            sleep 5
          done

  build-package:
    runs-on: ubuntu-24.04
    env:
      VERSION: ${{ github.event.release.tag_name }}
    permissions:
      contents: write
    needs:
      - doc-tests

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5.1.0

      - name: Update pyproject.toml project version
        run: |
          sed -i.bak -E "s/^version\s*=\s*\"[^\"]+\"/version = \"${VERSION}\"/" pyproject.toml
          echo "Updated pyproject.toml to project version '${VERSION}'" - pyproject.toml:
          cat pyproject.toml

      - name: Update pyproject.toml development status classifier
        run: |
          if [[ "$VERSION" == *"a"* ]]; then
            DEV_STATUS="Development Status :: 3 - Alpha"
          elif [[ "$VERSION" == *"b"* ]]; then
            DEV_STATUS="Development Status :: 4 - Beta"
          elif [[ "$VERSION" == *"rc"* ]]; then
            DEV_STATUS="Development Status :: 4 - Beta"
          else
            DEV_STATUS="Development Status :: 5 - Production/Stable"
          fi
          sed -i.bak "/classifiers = \[/a \ \ \ \ \"$DEV_STATUS\"," pyproject.toml
          echo "Updated pyproject.toml to development status classifier '${DEV_STATUS}'" - pyproject.toml:
          cat pyproject.toml

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: "Build package"
        run: uv build

      - name: Upload distribution artefacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Upload distributions to github release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${VERSION} dist/* --clobber

  deploy-package:
    runs-on: ubuntu-24.04
    needs:
      - build-package
      - build-docs-check

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5.1.0

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Upload Python package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: uv run twine upload dist/*

      - name: Test Package Is Installable & Importable
        run: uv run --with $PACKAGE_NAME --no-project -- python -c "import $PACKAGE_NAME"


  cleanup-on-failure:
    runs-on: ubuntu-latest
    needs:  # Will run if any of these fail
    - pylint
    - black
    - mypy
    - unit-tests
    - functional-tests
    - integration-tests
    - doc-tests
    - build-docs-check
    - build-package
    - deploy-docs
    - deploy-package
    if: failure() || cancelled()
    permissions:
      contents: write
    steps:
      - name: Install GitHub CLI
        run: sudo apt update && sudo apt install gh -y

      - name: Delete Release and Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete ${{ github.event.release.tag_name }} --repo ${{ github.repository }} --yes
          gh api --method DELETE "/repos/${{ github.repository }}/git/refs/tags/${{ github.event.release.tag_name }}"
